#!/usr/bin/env python
from __future__ import division, print_function
from casacore.tables import table, makecoldesc, maketabdesc
from datetime import datetime, timedelta
from argparse import ArgumentParser
from astropy.coordinates import EarthLocation, AltAz, SkyCoord
from tqdm import tqdm
from astropy.time import Time
import numpy as np
import astropy.units as unit
from astropy.io import fits
import time as tm
import sys


class MeasurementSet:
    """
    This custom class helps read and write data to the measurement set. 
    python-casacore is a parent class of MeasurementSet.
    """

    c = 299792458 ## speed of light (m/s)

    def __init__(self, msName):
        self.msName = msName


    def read(self):
        start = tm.time()
        self.mset = table(self.msName, readonly=True, ack=False)
        mset = self.mset

        ## get the phase centre of the observation
        self.ra_rad, self.dec_rad = mset.FIELD.getcol('PHASE_DIR')[0,0]
        self.ra_deg, self.dec_deg = np.degrees(self.ra_rad), np.degrees(self.dec_rad)

        ## read other relevant data from ms
        self.data = mset.getcol("CORRECTED_DATA")
        self.time = mset.getcol("TIME")
        self.ant1 = mset.getcol("ANTENNA1")
        self.ant2 = mset.getcol("ANTENNA2")
        self.freq = mset.SPECTRAL_WINDOW.getcell("CHAN_FREQ", 0)
        self.antloc = mset.ANTENNA.getcol("POSITION")
        self.antname = mset.ANTENNA.getcol('NAME')
        self.noChannels = self.data.shape[1] ## no. of fine channels in ms
        self.noRows = len(self.ant1)

        try:
            """
            note ms column ORG_UVW is my own data column 
            in ms where I store the farfield delays that 
            was calculated by chgcentre (Andre's tool)
            """
            self.uvw = mset.getcol("ORG_UVW")
            if verbose:
                print("ms column ORG_UVW exists")
        except:
            self.uvw = mset.getcol("UVW")
            if verbose:
                print("ms column ORG_UVW does not exist. Using UVW instead.")

        self.uvw_org = self.uvw
        self.wavelength = 299792458/self.freq
        mset.close()

        elapsed = tm.time() - start

        if verbose:
            print("data loaded from ms. time elapsed {}s".format(elapsed))
    

    def write(self, updatedMS):
        start = tm.time()
        self.mset = table(self.msName, readonly=False, ack=False)
        mset = self.mset

        ## create new ms imaging column
        if "FOCUSED" not in mset.colnames():
            if verbose:
                print("ms column FOCUSED does not exist. Making new column")
            cd1 = makecoldesc("FOCUSED", mset.getcoldesc("CORRECTED_DATA")) ## new column desc
            tb1 = maketabdesc(cd1) ## new table desc
            mset.addcols(tb1)
        else:
            if verbose:
                print("ms column FOCUSED alread exists.")

        mset.putcol('FOCUSED', updatedMS.data)

        ## create UVW column to store original (farfield) UVW, if it does not already exists
        if "ORG_UVW" not in mset.colnames():
            if verbose:
                print("ms column ORG_UVG does not exist. Making new column.")
            cd2 = makecoldesc("ORG_UVW", mset.getcoldesc("UVW")) ## new column desc
            tb2 = maketabdesc(cd2) ## new table desc
            mset.addcols(tb2)
            mset.putcol("ORG_UVW", updatedMS.uvw_org)
        else:
            if verbose:
                print("ms column ORG_UVW already exists.")
        
        mset.putcol("UVW", updatedMS.uvw)
        mset.flush()
        mset.close()

        elapsed = tm.time() - start

        if verbose:
            print("...finished writing to ms. time elapsed {}s".format(elapsed))
    

def msTime2UTC(time):
    """
    converts from the wierd ms time format to usable time

    Parameters
    ----------
    time    : the wierd ms time

    Returs
    ------
    time    : useful time
    """

    time_local = time/(24*3600)
    tmp = Time(time_local, format='mjd')

    return tmp.datetime


def getLatLonAlt(x, y, z):
    """
    convert geocentric cartesian coordinates to lat lon and alt

    Parameters
    ----------
    x   : x coordinate
    y   : y coordinate
    z   : z coordinate

    Returns
    -------
    lat : latitude
    lon : longitude
    alt : altitude
    """

    pos = EarthLocation.from_geocentric(x,y,z, unit="m").to_geodetic()

    return pos.lat.degree, pos.lon.degree, pos.height


def getAltAz(x, y, z):
    """
    computes the alt-az of phase centre from geometrical centre of array

    Parameters
    ----------
    x       : geocetric mean x position of the array
    y       : geocetric mean y position of the array
    z       : geocetric mean z position of the array

    Returns
    -------
    alt     : the alt (deg) of phase centre
    az      : the az (deg) of phase centre
    """

    lat, lon, height = getLatLonAlt(x, y, z)
    pos = EarthLocation(lon=lon*unit.deg, lat=lat*unit.deg, height=float(str(height)[:-1])*unit.m)
    coord = SkyCoord(ms.ra_deg, ms.dec_deg, unit=(unit.deg,unit.deg))
    coord.time = timestep + timedelta(hours=pos.lon.hourangle)
    coord = coord.transform_to(AltAz(obstime=timestep, location=pos))

    return np.degrees(coord.alt.rad), np.degrees(coord.az.rad)


def getAntXYZ(antName):
    """
    gets antenna's x,y,z coordinates in local reference frame.
    
    Note that the mean North, South, and Height values from 
    metafits does not coincide with (0,0,0). Hence, the returned
    positions are explicitely offseted by the mean value to force
    the centre of the array to be at (0,0,0). This does NOT change
    the calculated delay as it is a linear offset in the arbirarily 
    defined cartesian reference frame and the coordinates of the focal
    point also assumses (0,0,0) to the centre of the array


    Parameters
    ----------
    antName : the name of the antenna

    Returns
    -------
    tile_x  : x coordinate of the tile in local ref frame
    tile_y  : y coordinate of the tile in local ref frame
    tile_z  : z coordinate of the tile in local ref frame
    """
    
    ## mean offset to apply
    z_offset = np.mean(hdu[1].data['North'])
    y_offset = np.mean(hdu[1].data['Height'])
    x_offset = -np.mean(hdu[1].data['East'])
    
    # index of tile in metafits file
    index = np.where(hdu[1].data['TileName'] == antName)[0][0]
    
    ## updated x,y,z coordinates of the tile
    tile_z = hdu[1].data['North'][index] - z_offset
    tile_y = hdu[1].data['Height'][index] - y_offset
    tile_x = -hdu[1].data['East'][index] - x_offset
    
    return tile_x, tile_y, tile_z


def getPhase(ant1, ant2, uvw, hdu):
    """
    calculates near-field phase/delay for a baseline

    Parameters
    ----------
    ant1    : antenna 1 of the baseline being considered
    ant2    : antenna 2 of the baseline being considered
    uvw     : far field uvw coordinates of the baseline
    hdu     : the metafits file for the observation

    Returns
    -------
    phi     : the phase correction to apply to vis
    new_w   : the calculated near-field delay (or w-term)

    """

    antName1 = ms.antname[ant1]
    antName2 = ms.antname[ant2]
    u, v, w = uvw

    ## antenna positions in local cartesian reference frame
    tile1_x, tile1_y, tile1_z = getAntXYZ(antName1)
    tile2_x, tile2_y, tile2_z = getAntXYZ(antName2)

    ## calculate distance from antennas to focal point
    r1 = np.sqrt((tile1_x + focus_x)**2 + (tile1_y - focus_y)**2\
              + (tile1_z - focus_z)**2)
    r2 = np.sqrt((tile2_x + focus_x)**2 + (tile2_y - focus_y)**2\
              + (tile2_z - focus_z)**2)

    ## calculate near-field delay
    new_w = r2 - r1
    phi = new_w - w

    return phi, new_w


def getFocusXYZ(focus):
    """
    returns the x,y,z coordinates of focal point 

    Parameters
    ----------
    focus   : the focal distance of the array (km)

    Returns
    -------
    x       : x coordinate of the focus
    y       : y coordinate of the focus
    z       : z coordinate of the focus
    """

    ## calcualte the Geocentric mean coordinates of the array and the 
    mwa_x, mwa_y, mwa_z = np.mean(ms.antloc[:,0]), np.mean(ms.antloc[:,1]), np.mean(ms.antloc[:,2])

    ## calcualte alt-az of focus from mean position of array
    mwa_alt, mwa_az = getAltAz(mwa_x, mwa_y, mwa_z)

    ## calcualte x,y,z using focus and alt-az angles
    z = args.focus*1e3*np.cos(np.radians(mwa_alt))*np.cos(np.radians(mwa_az))
    x = args.focus*1e3*np.cos(np.radians(mwa_alt))*np.sin(np.radians(mwa_az))
    y = args.focus*1e3*np.sin(np.radians(mwa_alt))

    return x, y, z


def worker(i):
    """
    worker func for a single thread
    """

    ant1 = ms.ant1[i]
    ant2 = ms.ant2[i]

    ## filter out auto corr.
    if ant1 != ant2:
        uvw = ms.uvw[i]

        phi, w_new = getPhase(ant1, ant2, uvw, hdu)

        ## update old w with new w
        ms.uvw[i][2] = w_new

        ## phase rotate the visibilities
        phase = -2j*np.pi*phi/ms.wavelength
        for pol in range(4):
            tmp = np.copy(ms.data[i,:,pol])
            ms.data[i,:,pol] = tmp*np.exp(phase)

    return


def getRelevantRows():
    """
    get the rows from ms that correspond to the considered timestep
    """

    converted_time = msTime2UTC(ms.time)

    relevant_rows = []

    for i in range(ms.noRows):
        t = str(converted_time[i])
        if str(t) != str(timestep):
            continue
        else:
            relevant_rows.append(i)

    ## quit if no relevant rows found
    if len(relevant_rows) == 0:
        print('no delay corrections done. Quitting...')
        sys.exit(0)

    if verbose:
        print('found {}/{} relevant ms indexes'.format(len(relevant_rows), ms.noRows))

    return relevant_rows


def main(args):
    """
    main magic happens here
    """

    global_start = tm.time()
    global ms, hdu

    ## load and read existing data from ms and metafits
    ms = MeasurementSet(args.ms)
    ms.read()
    hdu = fits.open(args.metafits)

    start = tm.time() ## timer for calulating phase/delay corrections

    ## calculate the x,y,z coordinate of the focal point in local reference frame
    global focus_x, focus_y, focus_z
    focus_x, focus_y, focus_z = getFocusXYZ(args.focus)
    
    ## find indexes of relevant (t=timestep) rows in ms
    relevant_rows = getRelevantRows()
    
    ## apply delay corrections
    for i in tqdm(relevant_rows):
        worker(i)
    
    elapased = tm.time() - start

    if verbose:
        print("Phase correction done. Time elapsed {}s".format(elapased))

    ## write corrected data back to ms
    if verbose:
        print("writing corrected data to ms...")

    ms_new = MeasurementSet(args.ms)
    ms_new.write(ms)

    if args.verbose:
        print("total time taken {}.s".format(tm.time()- global_start))


if __name__ == "__main__":
    parser = ArgumentParser('LEOLens', \
                description='focuses the array to the desired near-field point')
    parser.add_argument('--ms', required=True,\
                help='input measurement set')
    parser.add_argument('--time', required=True, \
                help='the time-step to apply corrections')
    parser.add_argument('--focus', type=float, required=True,\
                help='the desired focal length (km)')
    parser.add_argument('--metafits', required=True,\
                help='the metafits of the observation')
    parser.add_argument('--verbose', type=bool, default=False,\
                help='runs scipt in verbose mode (default=False)')
    args = parser.parse_args()

    global verbose, timeStep
    verbose = args.verbose

    ## parse different possible types of input datetime formats
    try:
        timestep = datetime.strptime(args.time, '%Y-%m-%dT%H:%M:%S.%f')
    except:
        timestep = datetime.strptime(args.time, '%Y-%m-%dT%H:%M:%S')

    if verbose:
        print('running LEOLens in verbose mode.')

    main(args)



